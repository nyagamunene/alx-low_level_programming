!<arch>
0-isupper.c/    0           0     0     644     183       `
#include "main.h"
/**
*_isupper - checks for upper
*@c: The characters
*Return: 1 / 0
*/
int _isupper(int c)
{
	if (c > 64 && c <  91)
	{
		return (1);
	}
	else
	{
		return (0);
	}
}

0-memset.c/     0           0     0     644     273       `
#include "main.h"
/**
*_memset - set memory.
*@s: string pointer.
*@b: the character to be filled.
*@n: the size.
*Return: the string character.
*/
char *_memset(char *s, char b, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
	{
		s[i] = b;
	}
	return (s);
}

0-strcat.c/     0           0     0     644     420       `
#include "main.h"

/**
*_strcat - concatenated two strings
*@dest: The string to be appended to.
*@src: The string to be joined.
*Return: string that has been concatenated
*/

char *_strcat(char *dest, char *src)
{
	int i = 0, j = 0, k, p;

	while (src[i] != '\0')
	{
		i++;
	}
	while (dest[j] != '\0')
	{
		j++;
	}
	for (k = j, p = 0; k < (i + j); k++, p++)
	{
		dest[k] = src[p];
	}
	dest[k] = '\0';
	return (dest);
}
100-atoi.c/     0           0     0     644     503       `
#include "main.h"
/**
 * _atoi - string to integer
 * @s: string pointer
 * Return: Integer
 */
int _atoi(char *s)
{
	int num = 0, i;
	int sign = -1;

	for (i = 0; s[i] != '\0'; i++)
	{
		if (s[i] == '-')
		{
			sign = sign * -1;
		}

		if (s[i] > 47 && s[i] < 58)
		{
			if (num < 0)
			{
				num = (num * 10) - (s[i] - '0');
			}
			else
			{
				num = (s[i] - '0') * -1;
			}
			if (s[i + 1] < 48 || s[i + 1] > 57)
			{
				break;
			}
		}
	}
	if (sign < 0)
	{
		num =  num * -1;
	}
	return (num);
}

1-isdigit.c/    0           0     0     644     154       `
#include "main.h"
/**
*_isdigit - check if its a digit
*@c: the character
*Return: 1 / 0
*/
int _isdigit(int c)
{
	return ((c > 47 && c < 58) ? 1 : 0);
}
1-memcpy.c/     0           0     0     644     314       `
#include "main.h"
/**
*_memcpy - copy from memory.
*@dest: Destination to be copied to.
*@src: Source to be copied from.
*@n: Size of mem.
*Return: Destination pointer.
*/
char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
	{
		dest[i] = src[i];
	}
	return (dest);
}
1-strncat.c/    0           0     0     644     404       `
#include "main.h"
/**
*_strncat - concatenates 2 strings
*@dest: the string to be appended to.
*@src: the string to be attached.
*@n: The number of characters to be appended.
*Return: The appended string.
*/
char *_strncat(char *dest, char *src, int n)
{
	int i = 0, j = 0;

	while (dest[i] != '\0')
	{
		i++;
	}
	while (j < n && src[j] != '\0')
	{
		dest[i] = src[j];
		i++;
		j++;
	}
	return (dest);
}
2-strchr.c/     0           0     0     644     254       `
#include "main.h"
/**
*_strchr - locate char in string.
*@s: the string.
*@c: the character.
*Return: The occurence of the char
*/

char *_strchr(char *s, char c)
{
	while (*s != '\0')
	{
		if (*s == c)
		{
			return (s);
		}
		s++;
	}
	return (NULL);
}
2-strlen.c/     0           0     0     644     215       `
#include "main.h"

/**
*_strlen - function returning the length of a string
*@s: The string
*Return: Length of string
*/
int _strlen(char *s)
{
	int len = 0;

	while (s[len] != '\0')
	{
		len++;
	}
	return (len);
}

2-strncpy.c/    0           0     0     644     369       `
#include "main.h"
/**
*_strncpy - copies string characters.
*@dest: the final string.
*@src: the string to be copied.
*@n: the number of characters.
*Return: the final string.
*/
char *_strncpy(char *dest, char *src, int n)
{
	int i = 0;

	while (src[i] != '\0' && i < n)
	{
		dest[i] = src[i];
		i++;
	}
	while (n > i)
	{
		dest[i] = '\0';
		i++;
	}
	return (dest);
}

3-islower.c/    0           0     0     644     185       `
#include "main.h"
/**
 * _islower - checks for lowercase
 * @c: Character to be checked is lowercase
 * Return: 1 / 0
 */
int _islower(int c)
{
	return ((c > 96 && c < 123) ? 1 : 0);
}

3-puts.c/       0           0     0     644     226       `
#include "main.h"

/**
*_puts - prints string followed by line
*@str: The string pointer
*Return: None
*/
void _puts(char *str)
{
	int len = 0;

	for ( ; str[len] != '\0'; len++)
	{
		_putchar(str[len]);
	}
	_putchar('\n');
}
3-strcmp.c/     0           0     0     644     324       `
#include "main.h"
/**
*_strcmp - compares 2 strings
*@s1: First string pointer
*@s2: Second string pointer
*Return: return non zero for inequality and 0 for equality
*/
int _strcmp(char *s1, char *s2)
{
	int i = 0;

	while (s1[i] != '\0')
	{
		if (s1[i] != s2[i])
		{
			return (s1[i] - s2[i]);
		}
		i++;
	}
	return (0);
}
3-strspn.c/     0           0     0     644     436       `
#include "main.h"
/**
*_strspn - gets length of a prefix substring.
*@s: source.
*@accept: to be checked.
*Return: count of bytes.
*/

unsigned int _strspn(char *s, char *accept)
{
	unsigned int count = 0;
	int i = 0, j = 0;

	while (s[i] != '\0')
	{
		j = 0;
		while (accept[j] != '\0')
		{
			if (s[i] == accept[j])
			{
				count++;
				break;
			}
			j++;
		}
		if (accept[j] == '\0')
		{
			break;
		}
		i++;
	}
	return (count);
}
4-isalpha.c/    0           0     0     644     200       `
#include "main.h"
/**
 * _isalpha - lowercase / uppercase
 * @c: The character been checked
 * Return: 1 / 0
 */
int _isalpha(int c)
{
	return (((c > 65 && c < 91) || (c > 96 && c < 123)) ? 1 : 0);
}
4-strpbrk.c/    0           0     0     644     391       `
#include "main.h"
/**
*_strpbrk - locate first occurence.
*@accept: Matching string pointer.
*@s: String pointer.
*Return: the occurence.
*/

char *_strpbrk(char *s, char *accept)
{
	int i = 0, j = 0;
	char *str;

	while (s[i] != '\0')
	{
		while (accept[j] != '\0')
		{
			if (s[i] == accept[j])
			{
				str = &s[i];
				return (str);
			}
			j++;
		}
		j = 0;
		i++;
	}
	return (NULL);
}

5-strstr.c/     0           0     0     644     540       `
#include "main.h"
/**
*_strstr - function finding occurence in string
*@haystack: The string
*@needle: Occurence
*Return: string of occurence
*/
char *_strstr(char *haystack, char *needle)
{
	int i = 0, c = 0, j;

	for ( ; haystack[i] != '\0'; )
	{
		j = 0;
		while (needle[j + c] != '\0' && haystack[i + c] != '\0'
		       && needle[j + c] == haystack[i + c])
		{
			if (haystack[i + c] != needle[j + c])
			{
				break;
			}
			c++;
		}
		if (needle[j + c] == '\0')
		{
			return (&haystack[i]);
		}
		j++;
		i++;
	}

	return (NULL);	
}
6-abs.c/        0           0     0     644     154       `
#include "main.h"
/**
 * _abs - retuns absolute value of integer
 * @n: The number
 * Return: n / -n
 */
int _abs(int n)
{
	return ((n >= 0) ? n : -n);
}
9-strcpy.c/     0           0     0     644     347       `
#include "main.h"
/**
 * _strcpy - function copies string from source to destination
 * @dest: The target
 * @src: The source of string
 * Return: Char type
 */
char *_strcpy(char *dest, char *src)
{
	int len = 0, i;

	while (src[len] != '\0')
	{
		len++;
	}
	for (i = 0; i < len; i++)
	{
		dest[i] = src[i];
	}
	dest[i] = '\0';
	return (dest);
}

_putchar.c/     0           0     0     644     243       `
#include "main.h"
/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}
